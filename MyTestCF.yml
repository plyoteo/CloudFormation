Parameters:
  MyRoute52DnsName:
    Type: String
    Default: plyoteo.net
  DesiredCapacity:
    Type: Number
    Default: 1
  MinSize:
    Type: Number
    Default: 1
  MaxSize:
    Type: Number
    Default: 2
Mappings:
  RegionAmi:
    eu-central-1:
      ami: ami-0eb7496c2e0403237
    eu-west-2:
      ami: ami-0dd555eb7eb3b7c82
    us-east-1:
      ami: ami-033b95fb8079dc481
    us-west-1:
      ami: ami-0573b70afecda915d
Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: True
  MyPublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs
            Ref: AWS::Region
  MyPublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - !GetAZs
            Ref: AWS::Region
  MyPrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 0
        - !GetAZs
            Ref: AWS::Region
  MyPrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select
        - 1
        - !GetAZs
            Ref: AWS::Region
  MyPublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
  MyIgw:
    Type: AWS::EC2::InternetGateway
  MyIgwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyIgw
      VpcId: !Ref MyVPC
  MyInternetRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyIgw
  MyPublicSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      RouteTableId: !Ref MyPublicRT
  MyPublicSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPublicSubnet2
      RouteTableId: !Ref MyPublicRT
  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  MyNAT:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref MyPublicSubnet1
      AllocationId: !GetAtt MyEIP.AllocationId
  MyPrivateRT:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVPC
  MyNATRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRT
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyNAT
  MyPrivateSubnet1Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet1
      RouteTableId: !Ref MyPrivateRT
  MyPrivateSubnet2Association:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref MyPrivateSubnet2
      RouteTableId: !Ref MyPrivateRT
  MyPublicSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MyPublicSG
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
  MyPrivateSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MyPrivateSG
      VpcId: !Ref MyVPC
  MyPublicOutbound:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      DestinationSecurityGroupId: !GetAtt
        - MyPrivateSG
        - GroupId
      GroupId: !GetAtt
        - MyPublicSG
        - GroupId
  MyPrivateInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: -1
      FromPort: -1
      ToPort: -1
      SourceSecurityGroupId: !Ref MyPublicSG
      GroupId: !Ref MyPrivateSG
  MyTG1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC 
      Name: TG1
      Protocol: HTTP
      Port: 80
      HealthCheckEnabled: True
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
  MyTG2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref MyVPC 
      Name: TG2
      Protocol: HTTP
      Port: 80
      HealthCheckEnabled: True
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 5
      HealthCheckIntervalSeconds: 30
  MyALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB
      Scheme: internet-facing
      Type: application 
      IpAddressType: ipv4
      Subnets:
        - !Ref MyPublicSubnet1
        - !Ref MyPublicSubnet2
      SecurityGroups:
        - !Ref MyPublicSG
  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref MyALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTG1
          Order: 1
  MyListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Priority: 1
      ListenerArn: !Ref MyListener
      Conditions:
        - Field: host-header
          Values:
            - alt.plyoteo.net
      Actions:
        - Type: forward
          TargetGroupArn: !Ref MyTG2
          Order: 1
  MyEC2Profile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - S3FullAccess
  MyLT:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: MyLT
      LaunchTemplateData:
        ImageId: !FindInMap
          - RegionAmi
          - !Ref AWS::Region
          - ami
        InstanceType: t2.micro
        SecurityGroupIds:
          - !Ref MyPrivateSG
        IamInstanceProfile:
          Arn: !GetAtt
            - MyEC2Profile
            - Arn
        UserData: !Base64 |
          #!/bin/bash
          yum update -y
          yum install httpd -y
          systemctl start httpd
          systemctl enable httpd
          cd /var/www/html
          aws s3 cp s3://dctpocos/names.csv ./
          aws s3 cp s3://dctpocos/index.txt ./
          EC2NAME=`cat ./names.csv|sort -R|head -n 1|xargs`
          sed "s/INSTANCE/$EC2NAME/" index.txt > index.html
  MyASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyASG1
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLT
        Version: !GetAtt MyLT.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2
      TargetGroupARNs: 
        - !Ref MyTG1
  MyASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: MyASG2
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      LaunchTemplate:
        LaunchTemplateId: !Ref MyLT
        Version: !GetAtt MyLT.LatestVersionNumber
      VPCZoneIdentifier:
        - !Ref MyPrivateSubnet1
        - !Ref MyPrivateSubnet2
      TargetGroupARNs: 
        - !Ref MyTG2
  MyAliasRecord1:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !GetAtt MyALB.DNSName
        HostedZoneId: !GetAtt MyALB.CanonicalHostedZoneID
      HostedZoneName: !Join
        - ''
        - - !Ref MyRoute52DnsName
          - '.'
      Name: !Ref MyRoute52DnsName
      Type: A
  MyAliasRecord2:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget: 
        DNSName: !GetAtt MyALB.DNSName
        HostedZoneId: !GetAtt MyALB.CanonicalHostedZoneID
      HostedZoneName: !Join
        - ''
        - - !Ref MyRoute52DnsName
          - '.'
      Name: !Sub
        - 'alt.${name}'
        - name: !Ref MyRoute52DnsName
      Type: A